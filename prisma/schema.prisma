// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model hero {
  id          Int      @id @default(autoincrement())
  title1      String?  @db.VarChar(50)
  title2      String?  @db.VarChar(50)
  title3      String?  @db.VarChar(50)
  title4      String?  @db.VarChar(50)
  subtitle    String   @db.VarChar(200)
  description String   @db.VarChar(500)
  img         String   @db.LongText
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Gallery {
  id       Int           @id @default(autoincrement())
  cat_name String        @db.VarChar(50)
  images   Gallery_img[]
}

model Gallery_img {
  id        Int     @id @default(autoincrement())
  img_url   String  @db.LongText
  public_id String  @db.VarChar(100)
  cat_id    Int
  gallery   Gallery @relation(fields: [cat_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model qualification_page {
  id        Int     @id @default(autoincrement())
  title     String? @db.VarChar(100)
  sub_title String? @db.VarChar(100)
}

model Qualification {
  id             Int                @id @default(autoincrement())
  title          String             @db.VarChar(100)
  institute_name String             @db.VarChar(100)
  session        String             @db.VarChar(50)
  role           qualification_role
}

enum qualification_role {
  Education
  Work
}

model Marquee {
  id            Int    @id @default(autoincrement())
  title         String @db.VarChar(100)
  reverse_title String @db.VarChar(100)
}

model About_me_page {
  id        Int     @id @default(autoincrement())
  title     String? @db.VarChar(100)
  sub_title String? @db.VarChar(100)
}

model About_me {
  id        Int    @id @default(autoincrement())
  content   String @db.VarChar(700)
  expericed String @db.VarChar(50)
  projects  String @db.VarChar(50)
  works     String @db.VarChar(50)
  img       String @db.LongText
  cv        String @db.VarChar(500)
}

model Testimonial_page {
  id        Int     @id @default(autoincrement())
  title     String? @db.VarChar(100)
  sub_title String? @db.VarChar(100)
}

model Testimonial {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  title       String   @db.VarChar(50)
  description String   @db.VarChar(600)
  rating      Float    @db.Double
  img         String   @db.LongText
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Discount_project {
  id        Int    @id @default(autoincrement())
  title     String @db.VarChar(50)
  sub_title String @db.VarChar(50)
  img       String @db.LongText
}

model Social_media {
  id       Int    @id @default(autoincrement())
  github   String @db.VarChar(400)
  linkedin String @db.VarChar(400)
  facebook String @db.VarChar(400)
  medium   String @db.VarChar(400)
}

model Profile {
  id        Int      @id
  user_name String?  @db.VarChar(100)
  age       String?  @db.VarChar(50)
  mobile    String?  @db.VarChar(50)
  img       String?  @db.LongText
  email     String?  @unique @db.VarChar(50)
  password  String?  @db.VarChar(50)
  blogs     Blog[]
  createAt  DateTime @default(now()) @db.Timestamp(0)
  updateAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model Blog {
  id        Int       @id @default(autoincrement())
  title     String?   @db.VarChar(400)
  keywords  String?   @db.VarChar(400)
  short_des String?   @db.VarChar(400)
  long_des  String?   @db.LongText
  img       String?   @db.LongText
  highLight String?   @db.VarChar(200)
  profile   Profile   @relation(fields: [profileId], references: [id])
  profileId Int
  createAt  DateTime  @default(now()) @db.Timestamp(0)
  updateAt  DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  comment   comment[]
}

model comment {
  id      Int      @id @default(autoincrement())
  name    String?  @db.VarChar(400)
  email   String?  @db.VarChar(400)
  comment String?  @db.LongText
  approve Boolean? @default(true)
  img     String?  @db.LongText
  blogId  Int
  blog    Blog     @relation(fields: [blogId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model visitor_data {
  id       Int      @id @default(autoincrement())
  ip       String?  @db.VarChar(400)
  createAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}
